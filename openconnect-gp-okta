#!/usr/bin/env python3

import base64
import click
import getpass
import json
import lxml.etree
import requests
import subprocess
import sys
import urllib

try:
    import pyotp
except ImportError:
    pyotp = None

def check(r):
    r.raise_for_status()
    return r

def extract_form(html):
    form = lxml.etree.fromstring(html, lxml.etree.HTMLParser()).find('.//form')
    return (form.attrib['action'],
        {inp.attrib['name']: inp.attrib['value'] for inp in form.findall('input')})

def prelogin(s, gateway):
    r = check(s.post('https://{}/ssl-vpn/prelogin.esp'.format(gateway)))
    saml_req_html = base64.b64decode(lxml.etree.fromstring(r.content).find('saml-request').text)
    saml_req_url, saml_req_data = extract_form(saml_req_html)
    assert 'SAMLRequest' in saml_req_data
    return saml_req_url + '?' + urllib.parse.urlencode(saml_req_data)

def post_json(s, url, data):
    r = check(s.post(url, data=json.dumps(data),
        headers={'Content-Type': 'application/json'}))
    return r.json()

def okta_auth(s, domain, username, password, totp_key):
    r = post_json(s, 'https://{}/api/v1/authn'.format(domain),
        {'username': username, 'password': password})

    if r['status'] == 'MFA_REQUIRED':
        def priority(factor):
            return {
                'token:software:totp': 2 if totp_key is None else 0,
                'push': 1}.get(factor['factorType'], 2)
        for factor in sorted(r['_embedded']['factors'], key=priority):
            if factor['factorType'] == 'push':
                url = factor['_links']['verify']['href']
                while True:
                    r = post_json(s, url, {'stateToken': r['stateToken']})
                    if r['status'] != 'MFA_CHALLENGE':
                        break
                    assert r['factorResult'] == 'WAITING'
                break
            if factor['factorType'] == 'sms':
                url = factor['_links']['verify']['href']
                r = post_json(s, url, {'stateToken': r['stateToken']})
                assert r['status'] == 'MFA_CHALLENGE'
                code = input('SMS code: ')
                r = post_json(s, url, {'stateToken': r['stateToken'], 'passCode': code})
                break
            if factor['factorType'] == 'token:software:totp':
                url = factor['_links']['verify']['href']
                r = post_json(s, url, {'stateToken': r['stateToken']})
                assert r['status'] == 'MFA_CHALLENGE'
                if totp_key is None:
                    code = input('One-time code for {} ({}): '.format(factor['provider'], factor['vendorName']))
                else:
                    code = pyotp.TOTP(totp_key).now()
                r = post_json(s, url, {'stateToken': r['stateToken'], 'passCode': code})
                break
        else:
            assert False

    assert r['status'] == 'SUCCESS'
    return r['sessionToken']

def okta_saml(s, saml_req_url, username, password, totp_key):
    domain = urllib.parse.urlparse(saml_req_url).netloc

    # Just to set DT cookie
    check(s.get(saml_req_url))

    token = okta_auth(s, domain, username, password, totp_key)

    r = check(s.get('https://{}/login/sessionCookieRedirect'.format(domain),
        params={'token': token, 'redirectUrl': saml_req_url}))
    saml_resp_url, saml_resp_data = extract_form(r.content)
    assert 'SAMLResponse' in saml_resp_data
    return saml_resp_url, saml_resp_data

def complete_saml(s, saml_resp_url, saml_resp_data):
    r = check(s.post(saml_resp_url, data=saml_resp_data))
    return r.headers['saml-username'], r.headers['prelogin-cookie']

@click.command()
@click.argument('gateway')
@click.argument('openconnect-args', nargs=-1)
@click.option('--username')
@click.option('--password')
@click.option('--totp-key')
def main(gateway, openconnect_args, username, password, totp_key):
    if (totp_key is not None) and (pyotp is None):
        print('--totp-key requires pyotp!', file=sys.stderr)
        sys.exit(1)

    if username is None:
        username = input('Username: ')
    if password is None:
        password = getpass.getpass()

    with requests.Session() as s:
        saml_req_url = prelogin(s, gateway)
        saml_resp_url, saml_resp_data = okta_saml(s, saml_req_url, username, password, totp_key)
        saml_username, prelogin_cookie = complete_saml(s, saml_resp_url, saml_resp_data)

    subprocess_args = [
        'openconnect',
        gateway,
        '--protocol=gp',
        '--user=' + saml_username,
        '--usergroup=gateway:prelogin-cookie',
        '--passwd-on-stdin'
    ] + list(openconnect_args)

    with subprocess.Popen(subprocess_args, stdin=subprocess.PIPE) as p:
        p.communicate(input=prelogin_cookie.encode())

main()
