#!/usr/bin/env python3

import base64
import click
import getpass
import json
import lxml.etree
import requests
import subprocess
import urllib

def check(r):
    r.raise_for_status()
    return r

def extract_form(html):
    form = lxml.etree.fromstring(html, lxml.etree.HTMLParser()).find('.//form')
    return (form.attrib['action'],
        {inp.attrib['name']: inp.attrib['value'] for inp in form.findall('input')})

def prelogin(s, gateway):
    r = check(s.post('https://{}/ssl-vpn/prelogin.esp'.format(gateway)))
    xml = lxml.etree.fromstring(r.content)
    sam = xml.find('saml-auth-method').text
    sr = base64.b64decode(xml.find('saml-request').text)
    if sam == 'POST':
        saml_req_url, saml_req_data = extract_form(sr)
    elif sam == 'REDIRECT':
        saml_req_url, saml_req_data = sr, None
    else:
        assert False
    return saml_req_url, saml_req_data

def post_json(s, url, data):
    r = check(s.post(url, data=json.dumps(data),
        headers={'Content-Type': 'application/json'}))
    return r.json()

def okta_auth(s, domain, username, password):
    r = post_json(s, 'https://{}/api/v1/authn'.format(domain),
        {'username': username, 'password': password})

    if r['status'] == 'MFA_REQUIRED':
        for factor in r['_embedded']['factors']:
            if factor['factorType'] == 'push':
                url = factor['_links']['verify']['href']
                while True:
                    r = post_json(s, url, {'factorId': factor['id'], 'stateToken': r['stateToken']})
                    if r['status'] != 'MFA_CHALLENGE':
                        break
                    assert r['factorResult'] == 'WAITING'
                break
            if factor['factorType'] == 'sms':
                url = factor['_links']['verify']['href']
                r = post_json(s, url, {'factorId': factor['id'], 'stateToken': r['stateToken']})
                code = input('SMS code? ')
                r = post_json(s, url, {'factorId': factor['id'], 'stateToken': r['stateToken'], 'passCode': code})
                break
        else:
            assert False

    assert r['status'] == 'SUCCESS'
    return r['sessionToken']

def okta_saml(s, saml_req_url, saml_req_data, username, password):
    domain = urllib.parse.urlparse(saml_req_url).netloc

    # Just to set DT cookie
    check(s.request(('POST' if saml_req_data else 'GET'), saml_req_url, data=saml_req_data))

    token = okta_auth(s, domain, username, password)

    r = check(s.get('https://{}/login/sessionCookieRedirect'.format(domain),
        params={'token': token, 'redirectUrl': saml_req_url}))
    saml_resp_url, saml_resp_data = extract_form(r.content)
    assert 'SAMLResponse' in saml_resp_data
    return saml_resp_url, saml_resp_data

def complete_saml(s, saml_resp_url, saml_resp_data):
    r = check(s.post(saml_resp_url, data=saml_resp_data))
    return r.headers['saml-username'], r.headers['prelogin-cookie']

@click.command()
@click.argument('gateway')
@click.argument('openconnect-args', nargs=-1)
@click.option('--username')
@click.option('--password')
def main(gateway, openconnect_args, username, password):
    if username is None:
        username = input('Username: ')
    if password is None:
        password = getpass.getpass()

    with requests.Session() as s:
        saml_req_url, saml_req_data = prelogin(s, gateway)
        saml_resp_url, saml_resp_data = okta_saml(s, saml_req_url, saml_req_data, username, password)
        saml_username, prelogin_cookie = complete_saml(s, saml_resp_url, saml_resp_data)

    with subprocess.Popen(['openconnect', gateway, '--protocol=gp', '--user=' + saml_username,
            '--usergroup=gateway:prelogin-cookie', '--passwd-on-stdin'] +
            list(openconnect_args), stdin=subprocess.PIPE) as p:
        p.communicate(input=prelogin_cookie.encode())

main()
